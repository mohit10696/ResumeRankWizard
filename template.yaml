AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31


Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt MyLambdaRole.Arn

  FileUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: file-upload-function/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt MyLambdaRole.Arn
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref ResumeQueue
      Events:
        FileUploadApiEvent:
          Type: Api
          Properties:
            Path: /upload
            Method: POST
            
  
  getDynamoDBData:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-dynamoDbData-function/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt MyLambdaRole.Arn
      Events:
        FileUploadApiEvent:
          Type: Api
          Properties:
            Path: /getDynamoDBData
            Method: GET
  
  ResumeQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ResumeQueue
      VisibilityTimeout: 900
      MaximumMessageSize: 1024
  
  PdfProccesorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: pdf-processor-function/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt MyLambdaRole.Arn
      Timeout: 899
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref ResumeQueue
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ResumeQueue.Arn
  
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: SkillScores
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0de0dd4aba99b4a81
      InstanceType: t2.micro        # Replace this with your desired instance type
      KeyName: cloud-a3         # Replace this with the name of your EC2 key pair
      SecurityGroups:
        - !Ref MySecurityGroup     # Replace this with the name of your EC2 security group

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'

  MyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaRole
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: arn:aws:s3:::resume-classifier/*
        - PolicyName: SQSAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: arn:aws:sqs:*:*:ResumeQueue
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*
        - PolicyName: DynamoDBAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt DynamoDBTable.Arn
        - PolicyName: TextractAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - textract:DetectDocumentText
                Resource: '*'

